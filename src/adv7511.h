// Copyright 2021, Ryan Wendland, XboxHDMI by Ryzee119
// SPDX-License-Identifier: MIT

#pragma once

#pragma once 

#include "stm32.h"

#include <stdbool.h>

#define BIT(nr) (1UL << (nr))

#define ADV7511_INT0_HPD BIT(7)
#define ADV7511_INT0_MONITOR_SENSE BIT(6)

#define ADV7511_VIC_CHANGED 0x80
#define ADV7511_VIC_CHANGED_CLEAR 0x7F
#define ADV7511_VIC_UNAVAILABLE 0
#define ADV7511_VIC_VGA_640x480_4_3 1
#define ADV7511_VIC_480p_4_3 2
#define ADV7511_VIC_480p_16_9 3
#define ADV7511_VIC_720p_60_16_9 4
#define ADV7511_VIC_1080i_60_16_9 5

/* Hardware defined default addresses for I2C register maps */
#define ADV7511_MAIN_I2C_ADDR 0x72           //0x72>>1
#define ADV7511_CEC_I2C_ADDR_DEFAULT 0x78    //0x78>>1
#define ADV7511_EDID_I2C_ADDR_DEFAULT 0x7E   //0x7E>>1
#define ADV7511_PACKET_I2C_ADDR_DEFAULT 0x70 //0x70>>1

static const uint8_t identityMatrix[] = {
    0xA8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00};

static const uint8_t CscYcc709ToRgb[] = {
    0xAC, 0x51, 0x08, 0x00, 0x00, 0x00, 0x19, 0xD7,
    0x1C, 0x54, 0x08, 0x00, 0x1E, 0x89, 0x02, 0x91,
    0x00, 0x00, 0x08, 0x00, 0x0E, 0x87, 0x18, 0xBC};

static const uint8_t CscYuv709ToRgb[] = {
    0xE7, 0x2C, 0x04, 0xA7, 0x00, 0x00, 0x1C, 0x1F,
    0x1D, 0xDD, 0x04, 0xA7, 0x1F, 0x26, 0x01, 0x34,
    0x00, 0x00, 0x04, 0xA7, 0x08, 0x75, 0x1B, 0x7A};

static const uint8_t CscYcc601ToRgb[] = {
    0xAA, 0xF7, 0x08, 0x00, 0x00, 0x00, 0x1A, 0x84,
    0x1A, 0x6A, 0x08, 0x00, 0x1D, 0x50, 0x04, 0x22,
    0x00, 0x00, 0x08, 0x00, 0x0D, 0xDB, 0x19, 0x12};

static const uint8_t CscYuv601ToRgb[] = {
    0xE6, 0x62, 0x04, 0xA8, 0x00, 0x00, 0x1C, 0x84,
    0x1C, 0xBF, 0x04, 0xA8, 0x1E, 0x70, 0x02, 0x1E,
    0x00, 0x00, 0x04, 0xA8, 0x08, 0x12, 0x1B, 0xAC};

static const uint8_t CscRgbToYcc709[] = {
    0x88, 0x2D, 0x18, 0x94, 0x1F, 0x40, 0x08, 0x00,
    0x03, 0x68, 0x0B, 0x70, 0x01, 0x26, 0x00, 0x00,
    0x1E, 0x21, 0x19, 0xB3, 0x08, 0x2D, 0x08, 0x00};

static const uint8_t CscRgbToYuv709[] = {
    0x87, 0x06, 0x19, 0x9E, 0x1F, 0x5D, 0x08, 0x00,
    0x02, 0xED, 0x09, 0xD2, 0x00, 0xFD, 0x01, 0x00,
    0x1E, 0x63, 0x1A, 0x98, 0x07, 0x06, 0x08, 0x00};

static const uint8_t CscRgbToYcc601[] = {
    0x88, 0x2D, 0x19, 0x27, 0x1E, 0xAD, 0x08, 0x00,
    0x03, 0xA9, 0x09, 0x64, 0x01, 0xD2, 0x00, 0x00,
    0x1D, 0x40, 0x1A, 0x94, 0x08, 0x2D, 0x08, 0x00};

static const uint8_t CscRgbToYuv601[] = {
    0x87, 0x06, 0x1A, 0x1E, 0x1E, 0xDE, 0x08, 0x00,
    0x04, 0x1C, 0x08, 0x10, 0x01, 0x91, 0x01, 0x00,
    0x1D, 0xA2, 0x1B, 0x59, 0x07, 0x06, 0x08, 0x00};

static const uint8_t CscRgbFRtoYcc709FR[] = {
    0x88, 0x00, 0x18, 0xBC, 0x1F, 0x45, 0x08, 0x00,
    0x03, 0x66, 0x0B, 0x71, 0x01, 0x27, 0x00, 0x00,
    0x1E, 0x2B, 0x19, 0xD6, 0x08, 0x00, 0x08, 0x00};

static const uint8_t CscRgbFRtoYcc601FR[] = {
    0x88, 0x00, 0x19, 0x4E, 0x1E, 0xB3, 0x08, 0x00,
    0x04, 0xC8, 0x09, 0x64, 0x01, 0xD2, 0x00, 0x00,
    0x1D, 0x4D, 0x1A, 0xB4, 0x08, 0x00, 0x08, 0x00};

static const uint8_t CscRgbFRtoRgbLR[] = {
    0x8D, 0xBC, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x0D, 0xBC, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0D, 0xBC, 0x01, 0x00};

static const uint8_t CscRgbLRtoRgbFR[] = {
    0xA9, 0x50, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x6B,
    0x00, 0x00, 0x09, 0x50, 0x00, 0x00, 0x1F, 0x6B,
    0x00, 0x00, 0x00, 0x00, 0x09, 0x50, 0x1F, 0x6B};

static const uint8_t CscYcc709FRtoRgbFR[] = {
    0xAC, 0x99, 0x08, 0x00, 0x00, 0x00, 0x19, 0xB3,
    0x1E, 0x80, 0x08, 0x00, 0x1C, 0x41, 0x02, 0x9F,
    0x00, 0x00, 0x08, 0x00, 0x0E, 0xD8, 0x18, 0x94};

static const uint8_t CscYcc709FRtoRgbLR[] = {
    0xAA, 0x78, 0x06, 0xB3, 0x00, 0x0B, 0x1B, 0x3E,
    0x1C, 0xD9, 0x06, 0xB3, 0x1E, 0xBA, 0x02, 0xB6,
    0x1F, 0xF8, 0x06, 0xB3, 0x0C, 0x5A, 0x1A, 0x57};

static const uint8_t CscYcc709LRtoYcc601LR[] = {
    0xA7, 0xDD, 0x00, 0x00, 0x1F, 0x6C, 0x00, 0x5B,
    0x01, 0x88, 0x08, 0x00, 0x00, 0xCB, 0x1E, 0xD6,
    0x1F, 0x1D, 0x00, 0x00, 0x07, 0xEB, 0x00, 0x7B};

static const uint8_t CscYcc709LRtoYcc601FR[] = {
    0xA8, 0xEB, 0x00, 0x00, 0x1F, 0x58, 0x1F, 0xDE,
    0x01, 0xC9, 0x09, 0x50, 0x00, 0xEC, 0x1F, 0x25,
    0x1E, 0xFF, 0x00, 0x00, 0x08, 0xFA, 0x03, 0x1F};

static const uint8_t CscYcc709LRtoYcc709FR[] = {
    0xA9, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x72,
    0x00, 0x00, 0x09, 0x5A, 0x00, 0x00, 0x1F, 0x6A,
    0x00, 0x00, 0x00, 0x00, 0x09, 0x1B, 0x1F, 0x72};

static const uint8_t CscYcc709FRtoYcc709LR[] = {
    0x8E, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8,
    0x00, 0x00, 0x0D, 0xB0, 0x20, 0x00, 0x1F, 0x25,
    0x20, 0x00, 0x00, 0x00, 0x0E, 0x0E, 0x00, 0xF8};

static const uint8_t CscYcc709FRtoYcc601LR[] = {
    0x8D, 0xD2, 0x00, 0x00, 0x1E, 0xFD, 0x01, 0x98,
    0x02, 0xB1, 0x0D, 0xB0, 0x01, 0x64, 0x1D, 0x1A,
    0x1E, 0x72, 0x00, 0x00, 0x0D, 0xEA, 0x01, 0xD2};

static const uint8_t CscYcc601FRtoRgbFR[] = {
    0xAB, 0x37, 0x08, 0x00, 0x00, 0x00, 0x1A, 0x64,
    0x1A, 0x4A, 0x08, 0x00, 0x1D, 0x3F, 0x04, 0x3B,
    0x00, 0x00, 0x08, 0x00, 0x0E, 0x2D, 0x18, 0xE9};

static const uint8_t CscYcc601FRtoRgbLR[] = {
    0xA9, 0x5C, 0x06, 0xB3, 0x00, 0x06, 0x1B, 0xCE,
    0x1B, 0x32, 0x06, 0xB3, 0x1D, 0xBC, 0x04, 0x09,
    0x1F, 0xE7, 0x06, 0xAC, 0x0B, 0xD9, 0x1A, 0xA0};

static const uint8_t CscYcc601FRtoYcc709LR[] = {
    0xA7, 0x2D, 0x00, 0x00, 0x00, 0x87, 0x00, 0x25,
    0x1E, 0x89, 0x06, 0xDE, 0x1F, 0x41, 0x01, 0x9B,
    0x00, 0xCB, 0x00, 0x00, 0x07, 0x21, 0x00, 0x09};

static const uint8_t CscYcc601LRtoYcc709LR[] = {
    0xA8, 0x33, 0x00, 0x00, 0x00, 0x99, 0x1F, 0x99,
    0x1E, 0x56, 0x08, 0x00, 0x1F, 0x13, 0x01, 0x4B,
    0x00, 0xEA, 0x00, 0x00, 0x08, 0x26, 0x1F, 0x78};

static const uint8_t CscYcc601LRtoYcc601FR[] = {
    0xA9, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x6E,
    0x00, 0x00, 0x09, 0x50, 0x00, 0x00, 0x1F, 0x6B,
    0x00, 0x00, 0x00, 0x00, 0x09, 0x1B, 0x1F, 0x6E};

static const uint8_t CscYcc601FRtoYcc601LR[] = {
    0x8E, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x0D, 0xBC, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0E, 0x0D, 0x01, 0x00};

static const uint8_t CscYcc601LRtoYcc709FR[] = {
    0xA9, 0x56, 0x00, 0x00, 0x00, 0xAE, 0x1E, 0xFE,
    0x1E, 0x0E, 0x09, 0x5A, 0x1E, 0xEC, 0x00, 0xED,
    0x01, 0x0B, 0x00, 0x00, 0x09, 0x46, 0x1E, 0xD7};

enum adv7511_sync_polarity
{
    ADV7511_SYNC_POLARITY_PASSTHROUGH,
    ADV7511_SYNC_POLARITY_LOW,
    ADV7511_SYNC_POLARITY_HIGH,
};

typedef struct
{
    uint8_t hot_plug_detect;
    uint8_t monitor_sense;
    uint8_t interrupt;
} adv7511;

uint8_t adv7511_power_up(adv7511 *encoder);
uint8_t adv7511_update_register(uint8_t address, uint8_t mask, uint8_t new_value);
uint8_t adv7511_read_register(uint8_t address);
uint8_t adv7511_write_register(uint8_t address, uint8_t value);
uint8_t adv7511_write_cec(uint8_t address, uint8_t value);
void adv7511_struct_init(adv7511 *encoder);
uint8_t apply_csc(uint8_t *coefficients);